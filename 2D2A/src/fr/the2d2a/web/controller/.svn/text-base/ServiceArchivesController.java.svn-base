package fr.the2d2a.web.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.log4j.Logger;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.validation.BindException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.SimpleFormController;

import fr.the2d2a.bean.ImageProduit;
import fr.the2d2a.bean.Mail;
import fr.the2d2a.bean.ServiceArchives;
import fr.the2d2a.exception.TechnicalException;
import fr.the2d2a.service.MailService;
import fr.the2d2a.utils.FileHelper;
import fr.the2d2a.web.constants.ParamConstants;
import fr.the2d2a.web.constants.WebConstants;

public class ServiceArchivesController extends SimpleFormController {

	private static Logger logger = Logger.getLogger(ServiceArchivesController.class);

	private MailService mailService;
	private ResourceBundleMessageSource messageSource;
	
	@SuppressWarnings("unchecked")
	@Override
	protected ModelAndView onSubmit(HttpServletRequest request,
			HttpServletResponse response, Object command, BindException errors)
			throws Exception {
		
		logger.debug("In onSubmit de ServiceArchivesController");
		
		ServiceArchives serviceArch = (ServiceArchives)command;
		
		logger.info("Visu demande de service : " + ToStringBuilder.reflectionToString(serviceArch));
			
		String lang = (String)request.getSession().getAttribute(WebConstants.LANGUE);
		
		MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
		final Map<Object, MultipartFile> files = multiRequest.getFileMap();
        
        
        //Gestion du path des images sur le disque
		Locale locale = null;
		if (lang.equals(WebConstants.LANGUE_FR)) {
			locale = Locale.FRENCH;
		} else {
			locale = Locale.ENGLISH;
		}
		String path = messageSource.getMessage("service.general.path.contribution.fichier", null, locale);
		logger.debug("Visu du path : " + path);
		
		List<ImageProduit> filesToSend = new ArrayList<ImageProduit>();
		for (MultipartFile file : files.values()) {
			if (file != null && !file.isEmpty()) {
				logger.info("Visu image : " + file.getOriginalFilename());
				//Gestion des images
				String newPhotoFileName = FileHelper.manageUploadedImageFile(file, null, path, "");
				ImageProduit img = new ImageProduit();
				img.setPhoto(path + newPhotoFileName);
				img.setPhotoFile(file);
				filesToSend.add(img);
			}
		}
		serviceArch.setFiles(filesToSend);
		
		logger.debug("Visu objet demande : " + ToStringBuilder.reflectionToString(serviceArch.getObjetDemande()));
		
		try {
			Mail mail = mailService.getMail(ParamConstants.MAIL_FORM_ARCH_ID, lang);
			this.manageMail(mail, serviceArch, lang);
			mailService.sendMailToAdmin(serviceArch.getEmail(), mail, filesToSend);
			for (ImageProduit img : filesToSend) {
				FileHelper.deleteFile(img.getPhoto());
			}
			
		} catch (TechnicalException e) {
			e.printStackTrace();
			//TODO : enlever ce catch et gérer les technicals dans les pages (error 500 custo)
		}
		
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("service", serviceArch);
		
		return new ModelAndView(this.getSuccessView(), model);
	}
	
	@Override
	protected Object formBackingObject(HttpServletRequest request) throws Exception {
		logger.debug("In formBackingObject");
		return new ServiceArchives();
	}
	
	private void manageMail(Mail mail, ServiceArchives serviceArchives, String lang) {
		String contenu = mail.getContenu();
		
		contenu = contenu.replace("$prenom", serviceArchives.getPrenom());
		contenu = contenu.replace("$nom", serviceArchives.getNom());
		contenu = contenu.replace("$lieuNaissance", serviceArchives.getLieuNaissance());
		contenu = contenu.replace("$dateNaissance", serviceArchives.getDateNaissance());
		contenu = contenu.replace("$dateDeces", serviceArchives.getDateDeces());
		
		Locale locale = null;
		if (lang.equals(WebConstants.LANGUE_FR)) {
			locale = Locale.FRENCH;
		} else {
			locale = Locale.ENGLISH;
		}
		
		StringBuffer msg = new StringBuffer("");
		for (int i = 0;i < serviceArchives.getObjetDemande().length; i++) {
			if (serviceArchives.getObjetDemande()[i].equals("8")) {
				msg.append(serviceArchives.getAutreDemande()).append(";");
			} else {
				msg.append(messageSource.getMessage("service.archives.demande" + serviceArchives.getObjetDemande()[i], null, locale)).append(";");
			}
		}
		logger.debug("Message : " + msg.toString());
		contenu = contenu.replace("$demande", msg.toString());
		contenu = contenu.replace("$biographie", serviceArchives.getBiographie());
		contenu = contenu.replace("$information", serviceArchives.getInformation());
		contenu = contenu.replace("$collaboration", String.valueOf(serviceArchives.getCollaboration()));
		contenu = contenu.replace("$bibliographie", serviceArchives.getBibliographie());
		contenu = contenu.replace("$webSite", String.valueOf(serviceArchives.getWebSite()));
		
		contenu = contenu.replace("$email", serviceArchives.getEmail());
		
		// données Pros
		contenu = contenu.replace("$organisationPro", serviceArchives.getOrganisationPro());
		contenu = contenu.replace("$adressePro", serviceArchives.getAdressePro());
		contenu = contenu.replace("$complAdressePro", serviceArchives.getComplementAdressePro());
		contenu = contenu.replace("$villePro", serviceArchives.getVillePro());
		contenu = contenu.replace("$codePostalPro", serviceArchives.getCodePostalPro());
		contenu = contenu.replace("$telPro", serviceArchives.getTelPro());
		contenu = contenu.replace("$faxPro", serviceArchives.getFaxPro());
		contenu = contenu.replace("$sitePro", serviceArchives.getSitePro());
		contenu = contenu.replace("$sadresser", serviceArchives.getSadresserPro());
		contenu = contenu.replace("$direction", serviceArchives.getDirectionPro());
		
		mail.setContenu(contenu);
	}

	public void setMailService(MailService mailService) {
		this.mailService = mailService;
	}

	public void setMessageSource(ResourceBundleMessageSource messageSource) {
		this.messageSource = messageSource;
	}
}
